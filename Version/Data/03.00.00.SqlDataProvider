-- MODULE         : DNNSTUFF - MODULEROTATOR - DNN3
-- VERSION        : 03.00.00
-- 01/Nov/2005    : Initial release

-- handle potential upgrades from DNN2 Version
if exists (select * from {databaseOwner}sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_DeleteModuleRotator') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_DeleteModuleRotator
GO

if exists (select * from {databaseOwner}sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_GetModuleRotator') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_GetModuleRotator
GO

if exists (select * from {databaseOwner}sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_GetTabModules') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_GetTabModules
GO

if exists (select * from {databaseOwner}sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_UpdateModuleRotator') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_UpdateModuleRotator
GO

if exists (select * from {databaseOwner}sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_UpdateTabOrder') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_UpdateTabOrder
GO

-- update module references with new 'tabmodule' references
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_ModuleRotator') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	update {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_ModuleRotator 
		set tabmoduleid = (select top 1 tabmoduleid from {databaseOwner}{objectQualifier}tabmodules where
		moduleid = {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_ModuleRotator.tabmoduleid)
GO

-- create table if not already there
if not exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_ModuleRotator') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	CREATE TABLE {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_ModuleRotator (
		[ModuleRotatorId] [int] IDENTITY (1, 1) NOT NULL ,
		[ModuleId] [int] NOT NULL ,
		[TabModuleId] [int] NOT NULL ,
		[TabOrder] [int] NOT NULL CONSTRAINT [DF_DNNStuff_ModuleRotator_ModuleRotator_TabOrder] DEFAULT (0),
		CONSTRAINT [PK_DNNStuff_ModuleRotator_ModuleRotator] PRIMARY KEY  CLUSTERED 
		(
			[ModuleRotatorId]
		)  
	)
END
GO

-- Upgrades should be complete, now update to this version
CREATE procedure {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_DeleteModuleRotator
(
@ModuleRotatorId  int
)

AS

declare @CurrentTabOrder int
declare @ModuleId int

-- grab current taborder, module
select @ModuleId=ModuleId, @CurrentTabOrder=TabOrder from {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_ModuleRotator where  ModuleRotatorId = @ModuleRotatorId

-- remove it
delete from {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_ModuleRotator
where  ModuleRotatorId = @ModuleRotatorId

-- reshuffle tab order
update {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_ModuleRotator set TabOrder = TabOrder-1 WHERE ModuleId = @ModuleId and TabOrder > @CurrentTabOrder

GO

CREATE procedure {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_GetModuleRotator
(
@ModuleId  int
)

AS

-- First, clean up any modules deleted fom the DNN side
DELETE FROM {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_ModuleRotator WHERE ModuleId = @ModuleId AND TabModuleId IN (SELECT TabModuleId FROM {databaseOwner}{objectQualifier}Modules M INNER JOIN {databaseOwner}{objectQualifier}TabModules TM ON M.ModuleId = TM.ModuleId WHERE M.IsDeleted = 1)

-- Second, make sure that the module orders for all contained modules are greater than the ModuleRotator itself so rendering is correct sequence
UPDATE {databaseOwner}{objectQualifier}TabModules Set ModuleOrder = 1 +  (SELECT MAX(ModuleOrder) FROM {databaseOwner}{objectQualifier}TabModules WHERE ModuleId = @ModuleId)
	WHERE TabModuleId IN (SELECT TabModuleId FROM {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_ModuleRotator WHERE ModuleId = @ModuleId)
UPDATE {databaseOwner}{objectQualifier}TabModules Set PaneName = (SELECT TOP 1 PaneName FROM {databaseOwner}{objectQualifier}TabModules WHERE ModuleId = @ModuleId)
	WHERE TabModuleId IN (SELECT TabModuleId FROM {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_ModuleRotator WHERE ModuleId = @ModuleId)

-- Now, select remaining modules
SELECT A.ModuleRotatorId, A.TabModuleId, A.TabOrder, VM.ModuleTitle
	FROM {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_ModuleRotator A
		INNER JOIN {databaseOwner}{objectQualifier}vw_Modules VM ON VM.TabModuleId = A.TabModuleId
	WHERE A.ModuleId = @ModuleId
	ORDER BY A.TabOrder ASC
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_GetTabModules
(
@TabId int,
@ModuleId int
)
AS

-- Delete any modules that have been orphaned by a user delete of an ModuleRotator
DELETE FROM {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_ModuleRotator WHERE ModuleId NOT IN (SELECT ModuleId FROM {databaseOwner}{objectQualifier}Modules WHERE IsDeleted = 0)

DECLARE @PortalId int
SELECT @PortalId = PortalId FROM {databaseOwner}{objectQualifier}Tabs WHERE TabId = @TabId

-- Now, select remaining
SELECT VM.* FROM {databaseOwner}{objectQualifier}vw_Modules VM 
WHERE
	-- this tab
	VM.TabId = @TabId
		AND
	-- not this module
	VM.ModuleId <> @ModuleId
		AND
	-- not deleted
	VM.IsDeleted <> 1
		AND
	-- not already aggregated in this tab
	VM.TabModuleId NOT IN (SELECT A.TabModuleId FROM {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_ModuleRotator A 
		INNER JOIN {databaseOwner}{objectQualifier}vw_Modules VM ON A.TabModuleId = VM.TabModuleId 
		WHERE VM.TabId = @TabId OR A.ModuleId = @ModuleId)
		AND
	-- not a Module Rotator itself
	VM.ModuleId NOT IN (SELECT A.ModuleId FROM {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_ModuleRotator A)
		AND
	-- same portal
	VM.PortalId = @PortalId

GO

CREATE procedure {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_UpdateModuleRotator
(
@ModuleRotatorId  int,
@ModuleId int,
@TabModuleId int
)

as

DECLARE @MaxTabOrder int

if exists(select ModuleRotatorId From {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_ModuleRotator WHERE ModuleRotatorId = @ModuleRotatorId)
	-- update
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_ModuleRotator SET
			ModuleId = @ModuleId,
			TabModuleId = @TabModuleId
		WHERE ModuleRotatorId = @ModuleRotatorId
	END
else
	-- add
	BEGIN
		-- grab tab order
		SET @MaxTabOrder = (SELECT IsNull(Max(TabOrder),0) FROM {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_ModuleRotator WHERE ModuleId = @ModuleId)

		INSERT  INTO {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_ModuleRotator
			 (ModuleId, TabModuleId, TabOrder)
		 VALUES (@ModuleId, @TabModuleId, @MaxTabOrder+1)
		-- grab new id
		SET @ModuleRotatorId = @@IDENTITY
	END

-- set the tab module pane to the same as our module
UPDATE {databaseOwner}{objectQualifier}TabModules Set PaneName = (SELECT TOP 1 TM.PaneName FROM {databaseOwner}{objectQualifier}TabModules TM WHERE TM.ModuleId = @ModuleId) WHERE TabModuleId = @TabModuleId
GO

CREATE procedure {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_UpdateTabOrder

@ModuleRotatorId  int,
@Increment int

as

declare @CurrentTabOrder int
declare @ModuleId int

-- grab current taborder, module
select @ModuleId=ModuleId, @CurrentTabOrder=TabOrder from {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_ModuleRotator where  ModuleRotatorId = @ModuleRotatorId

-- update the tab we're replacing
update {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_ModuleRotator
set    TabOrder = @CurrentTabOrder
where  ModuleId = @ModuleId and TabOrder = @CurrentTabOrder+@Increment

-- update the tab we are setting
update {databaseOwner}{objectQualifier}DNNStuff_ModuleRotator_ModuleRotator
set    TabOrder = TabOrder + @Increment
where  ModuleRotatorId = @ModuleRotatorId

GO
